D G "__PCM__" 0 0 ""5.088d""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""11-Nov-19""
D G "__TIME__" 0 0 ""17:23:33""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?""
D G "__16F877" 0 0 "1" "Standard Header file for the PIC16F877 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `56 
f B "set_tris_b" 1 38 "void(int8 value)" `55 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `58 
f B "set_tris_c" 1 39 "void(int8 value)" `57 
f N "set_tris_d" 1 40 ""
v L "value" 1 40 "int8" `60 
f B "set_tris_d" 1 40 "void(int8 value)" `59 
f N "set_tris_e" 1 41 ""
v L "value" 1 41 "int8" `62 
f B "set_tris_e" 1 41 "void(int8 value)" `61 
f N "get_tris_a" 1 42 ""
f B "get_tris_a" 1 42 "int8()" `63 
f N "get_tris_b" 1 43 ""
f B "get_tris_b" 1 43 "int8()" `64 
f N "get_tris_c" 1 44 ""
f B "get_tris_c" 1 44 "int8()" `65 
f N "get_tris_d" 1 45 ""
f B "get_tris_d" 1 45 "int8()" `66 
f N "get_tris_e" 1 46 ""
f B "get_tris_e" 1 46 "int8()" `67 
f N "output_a" 1 47 ""
v L "value" 1 47 "int8" `69 
f B "output_a" 1 47 "void(int8 value)" `68 
f N "output_b" 1 48 ""
v L "value" 1 48 "int8" `71 
f B "output_b" 1 48 "void(int8 value)" `70 
f N "output_c" 1 49 ""
v L "value" 1 49 "int8" `73 
f B "output_c" 1 49 "void(int8 value)" `72 
f N "output_d" 1 50 ""
v L "value" 1 50 "int8" `75 
f B "output_d" 1 50 "void(int8 value)" `74 
f N "output_e" 1 51 ""
v L "value" 1 51 "int8" `77 
f B "output_e" 1 51 "void(int8 value)" `76 
f N "input_a" 1 52 ""
f B "input_a" 1 52 "int8()" `78 
f N "input_b" 1 53 ""
f B "input_b" 1 53 "int8()" `79 
f N "input_c" 1 54 ""
f B "input_c" 1 54 "int8()" `80 
f N "input_d" 1 55 ""
f B "input_d" 1 55 "int8()" `81 
f N "input_e" 1 56 ""
f B "input_e" 1 56 "int8()" `82 
f N "input_change_a" 1 57 ""
f B "input_change_a" 1 57 "int8()" `83 
f N "input_change_b" 1 58 ""
f B "input_change_b" 1 58 "int8()" `84 
f N "input_change_c" 1 59 ""
f B "input_change_c" 1 59 "int8()" `85 
f N "input_change_d" 1 60 ""
f B "input_change_d" 1 60 "int8()" `86 
f N "input_change_e" 1 61 ""
f B "input_change_e" 1 61 "int8()" `87 
f N "port_b_pullups" 1 62 ""
v L "value" 1 62 "int8" `89 
f B "port_b_pullups" 1 62 "void(int8 value)" `88 
f N "input" 1 63 ""
v L "pin" 1 63 "int16" `91 
f B "input" 1 63 "int8(int16 pin)" `90 
f N "input_state" 1 64 ""
v L "pin" 1 64 "int16" `93 
f B "input_state" 1 64 "int8(int16 pin)" `92 
f N "output_low" 1 65 ""
v L "pin" 1 65 "int16" `95 
f B "output_low" 1 65 "void(int16 pin)" `94 
f N "output_high" 1 66 ""
v L "pin" 1 66 "int16" `97 
f B "output_high" 1 66 "void(int16 pin)" `96 
f N "output_toggle" 1 67 ""
v L "pin" 1 67 "int16" `99 
f B "output_toggle" 1 67 "void(int16 pin)" `98 
f N "output_bit" 1 68 ""
v L "pin" 1 68 "int16" `101 
v L "level" 1 68 "int8" `102 
f B "output_bit" 1 68 "void(int16 pin,int8 level)" `100 
f N "output_float" 1 69 ""
v L "pin" 1 69 "int16" `104 
f B "output_float" 1 69 "void(int16 pin)" `103 
f N "output_drive" 1 70 ""
v L "pin" 1 70 "int16" `106 
f B "output_drive" 1 70 "void(int16 pin)" `105  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 74 "40"
d G "PIN_A1" 1 75 "41"
d G "PIN_A2" 1 76 "42"
d G "PIN_A3" 1 77 "43"
d G "PIN_A4" 1 78 "44"
d G "PIN_A5" 1 79 "45"
d G "PIN_B0" 1 81 "48"
d G "PIN_B1" 1 82 "49"
d G "PIN_B2" 1 83 "50"
d G "PIN_B3" 1 84 "51"
d G "PIN_B4" 1 85 "52"
d G "PIN_B5" 1 86 "53"
d G "PIN_B6" 1 87 "54"
d G "PIN_B7" 1 88 "55"
d G "PIN_C0" 1 90 "56"
d G "PIN_C1" 1 91 "57"
d G "PIN_C2" 1 92 "58"
d G "PIN_C3" 1 93 "59"
d G "PIN_C4" 1 94 "60"
d G "PIN_C5" 1 95 "61"
d G "PIN_C6" 1 96 "62"
d G "PIN_C7" 1 97 "63"
d G "PIN_D0" 1 99 "64"
d G "PIN_D1" 1 100 "65"
d G "PIN_D2" 1 101 "66"
d G "PIN_D3" 1 102 "67"
d G "PIN_D4" 1 103 "68"
d G "PIN_D5" 1 104 "69"
d G "PIN_D6" 1 105 "70"
d G "PIN_D7" 1 106 "71"
d G "PIN_E0" 1 108 "72"
d G "PIN_E1" 1 109 "73"
d G "PIN_E2" 1 110 "74"
d G "FALSE" 1 113 "0"
d G "TRUE" 1 114 "1"
d G "BYTE" 1 116 "int8"
d G "BOOLEAN" 1 117 "int1"
d G "getc" 1 119 "getch"
d G "fgetc" 1 120 "getch"
d G "getchar" 1 121 "getch"
d G "putc" 1 122 "putchar"
d G "fputc" 1 123 "putchar"
d G "fgets" 1 124 "gets"
d G "fputs" 1 125 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 130 ""
f B "restart_cause" 1 130 "int8()" `107 
f N "reset_cpu" 1 131 ""
f B "reset_cpu" 1 131 "void()" `108 
f N "sleep" 1 132 ""
f B "sleep" 1 132 "void()" `109  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 134 "3"
d G "WDT_TIMEOUT" 1 135 "11"
d G "MCLR_FROM_SLEEP" 1 136 "19"
d G "MCLR_FROM_RUN" 1 137 "27"
d G "NORMAL_POWER_UP" 1 138 "25"
d G "BROWNOUT_RESTART" 1 139 "26"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 146 ""
v L "mode" 1 146 "int8" `111 
f B "setup_timer_0" 1 146 "void(int8 mode)" `110 
f N "set_timer0" 1 147 ""
v L "value" 1 147 "int8" `113 
f B "set_timer0" 1 147 "void(int8 value)" `112 
f N "get_timer0" 1 148 ""
f B "get_timer0" 1 148 "int8()" `114 
f N "setup_counters" 1 149 ""
v L "mode" 1 149 "int8" `116 
v L "prescaler" 1 149 "int8" `117 
f B "setup_counters" 1 149 "void(int8 mode,int8 prescaler)" `115 
f N "set_rtcc" 1 150 ""
v L "value" 1 150 "int8" `119 
f B "set_rtcc" 1 150 "void(int8 value)" `118 
f N "get_rtcc" 1 151 ""
f B "get_rtcc" 1 151 "int8()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 153 "0"
d G "T0_EXT_L_TO_H" 1 154 "32"
d G "T0_EXT_H_TO_L" 1 155 "48"
d G "T0_DIV_1" 1 157 "8"
d G "T0_DIV_2" 1 158 "0"
d G "T0_DIV_4" 1 159 "1"
d G "T0_DIV_8" 1 160 "2"
d G "T0_DIV_16" 1 161 "3"
d G "T0_DIV_32" 1 162 "4"
d G "T0_DIV_64" 1 163 "5"
d G "T0_DIV_128" 1 164 "6"
d G "T0_DIV_256" 1 165 "7"
d G "T0_8_BIT" 1 168 "0"
d G "RTCC_INTERNAL" 1 172 "0"
d G "RTCC_EXT_L_TO_H" 1 173 "32"
d G "RTCC_EXT_H_TO_L" 1 174 "48"
d G "RTCC_DIV_1" 1 175 "8"
d G "RTCC_DIV_2" 1 176 "0"
d G "RTCC_DIV_4" 1 177 "1"
d G "RTCC_DIV_8" 1 178 "2"
d G "RTCC_DIV_16" 1 179 "3"
d G "RTCC_DIV_32" 1 180 "4"
d G "RTCC_DIV_64" 1 181 "5"
d G "RTCC_DIV_128" 1 182 "6"
d G "RTCC_DIV_256" 1 183 "7"
d G "RTCC_8_BIT" 1 184 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 195 ""
v L "mode" 1 195 "int16" `122 
f B "setup_wdt" 1 195 "void(int16 mode)" `121 
f N "restart_wdt" 1 196 ""
f B "restart_wdt" 1 196 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 199 "8"
d G "WDT_36MS" 1 200 "9"
d G "WDT_72MS" 1 201 "10"
d G "WDT_144MS" 1 202 "11"
d G "WDT_288MS" 1 203 "12"
d G "WDT_576MS" 1 204 "13"
d G "WDT_1152MS" 1 205 "14"
d G "WDT_2304MS" 1 206 "15"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 212 ""
v L "mode" 1 212 "int16" `125 
f B "setup_timer_1" 1 212 "void(int16 mode)" `124 
f N "get_timer1" 1 213 ""
f B "get_timer1" 1 213 "int16()" `126 
f N "set_timer1" 1 214 ""
v L "value" 1 214 "int16" `128 
f B "set_timer1" 1 214 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 217 "0"
d G "T1_INTERNAL" 1 218 "0x85"
d G "T1_EXTERNAL" 1 219 "0x87"
d G "T1_EXTERNAL_SYNC" 1 220 "0x83"
d G "T1_CLK_OUT" 1 222 "8"
d G "T1_DIV_BY_1" 1 224 "0"
d G "T1_DIV_BY_2" 1 225 "0x10"
d G "T1_DIV_BY_4" 1 226 "0x20"
d G "T1_DIV_BY_8" 1 227 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 232 ""
v L "mode" 1 232 "int8" `130 
v L "period" 1 232 "int8" `131 
v L "postscale" 1 232 "int8" `132 
f B "setup_timer_2" 1 232 "void(int8 mode,int8 period,int8 postscale)" `129 
f N "get_timer2" 1 233 ""
f B "get_timer2" 1 233 "int8()" `133 
f N "set_timer2" 1 234 ""
v L "value" 1 234 "int8" `135 
f B "set_timer2" 1 234 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 236 "0"
d G "T2_DIV_BY_1" 1 237 "4"
d G "T2_DIV_BY_4" 1 238 "5"
d G "T2_DIV_BY_16" 1 239 "6"
c L "set_timer2" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 245 ""
v L "mode" 1 245 "int32" `137 
f B "setup_ccp1" 1 245 "void(int32 mode)" `136 
f N "setup_ccp1" 1 246 ""
v L "mode" 1 246 "int32" `139 
v L "pwm" 1 246 "int8" `140 
f B "setup_ccp1" 1 246 "void(int32 mode,int8 pwm)" `138 
f N "set_pwm1_duty" 1 247 ""
v L "value" 1 247 "int16" `142 
f B "set_pwm1_duty" 1 247 "void(int16 value)" `141  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 249 "0"
d G "CCP_CAPTURE_FE" 1 250 "0x04"
d G "CCP_CAPTURE_RE" 1 251 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 252 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 253 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 254 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 255 "0x09"
d G "CCP_COMPARE_INT" 1 256 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 257 "0x0B"
d G "CCP_PWM" 1 258 "0x0C"
d G "CCP_PWM_PLUS_1" 1 259 "0x1c"
d G "CCP_PWM_PLUS_2" 1 260 "0x2c"
d G "CCP_PWM_PLUS_3" 1 261 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 268 ""
v L "mode" 1 268 "int32" `147 
f B "setup_ccp2" 1 268 "void(int32 mode)" `146 
f N "setup_ccp2" 1 269 ""
v L "mode" 1 269 "int32" `149 
v L "pwm" 1 269 "int8" `150 
f B "setup_ccp2" 1 269 "void(int32 mode,int8 pwm)" `148 
f N "set_pwm2_duty" 1 270 ""
v L "value" 1 270 "int16" `152 
f B "set_pwm2_duty" 1 270 "void(int16 value)" `151 
c L "set_pwm2_duty" 1 3 5 "FUNCTION"
f N "setup_psp" 1 280 ""
v L "mode" 1 280 "int8" `157 
f B "setup_psp" 1 280 "void(int8 mode)" `156 
f N "psp_output_full" 1 281 ""
f B "psp_output_full" 1 281 "int8()" `158 
f N "psp_input_full" 1 282 ""
f B "psp_input_full" 1 282 "int8()" `159 
f N "psp_overflow" 1 283 ""
f B "psp_overflow" 1 283 "int8()" `160  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 285 "0x10"
d G "PSP_DISABLED" 1 286 "0"
c L "psp_overflow" 1 3 3 "FUNCTION"
f N "setup_spi" 1 293 ""
v L "mode" 1 293 "int32" `163 
f B "setup_spi" 1 293 "void(int32 mode)" `162 
f N "spi_write" 1 294 ""
v L "value" 1 294 "int8" `165 
f B "spi_write" 1 294 "void(int8 value)" `164 
f N "spi_write" 1 295 ""
v L "wait" 1 295 "int8" `167 
v L "value" 1 295 "int8" `168 
f B "spi_write" 1 295 "void(int8 wait,int8 value)" `166 
f N "spi_read" 1 296 ""
f B "spi_read" 1 296 "int8()" `169 
f N "spi_read" 1 297 ""
v L "value" 1 297 "int8" `171 
f B "spi_read" 1 297 "int8(int8 value)" `170 
f N "spi_data_is_in" 1 298 ""
f B "spi_data_is_in" 1 298 "int8()" `172  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 300 "0x00"
d G "SPI_MASTER" 1 301 "0x20"
d G "SPI_SLAVE" 1 302 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 303 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 304 "0x00"
d G "SPI_CLK_DIV_4" 1 305 "0x00"
d G "SPI_CLK_DIV_16" 1 306 "0x01"
d G "SPI_CLK_DIV_64" 1 307 "0x02"
d G "SPI_CLK_T2" 1 308 "0x03"
d G "SPI_SS_DISABLED" 1 309 "0x01"
d G "SPI_XMIT_L_TO_H" 1 311 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 312 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 314 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 315 "0x8000"
d G "SPI_L_TO_H" 1 318 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 319 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 323 ""
v L "baud" 1 323 "int32" `174 
f B "setup_uart" 1 323 "void(int32 baud)" `173 
f N "setup_uart" 1 324 ""
v L "baud" 1 324 "int32" `176 
v L "stream" 1 324 "int8" `177 
f B "setup_uart" 1 324 "void(int32 baud,int8 stream)" `175 
f N "setup_uart" 1 325 ""
v L "baud" 1 325 "int32" `179 
v L "stream" 1 325 "int8" `180 
v L "clock" 1 325 "int32" `181 
f B "setup_uart" 1 325 "void(int32 baud,int8 stream,int32 clock)" `178 
f N "set_uart_speed" 1 326 ""
v L "baud" 1 326 "int32" `183 
f B "set_uart_speed" 1 326 "void(int32 baud)" `182 
f N "set_uart_speed" 1 327 ""
v L "baud" 1 327 "int32" `185 
v L "stream" 1 327 "int8" `186 
f B "set_uart_speed" 1 327 "void(int32 baud,int8 stream)" `184 
f N "set_uart_speed" 1 328 ""
v L "baud" 1 328 "int32" `188 
v L "stream" 1 328 "int8" `189 
v L "clock" 1 328 "int32" `190 
f B "set_uart_speed" 1 328 "void(int32 baud,int8 stream,int32 clock)" `187  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 332 "2"
d G "UART_DATA" 1 333 "4"
c L "set_uart_speed" 1 3 4 "FUNCTION"
f N "setup_adc" 1 340 ""
v L "mode" 1 340 "int16" `192 
f B "setup_adc" 1 340 "void(int16 mode)" `191 
f N "read_adc" 1 341 ""
f B "read_adc" 1 341 "int8()" `193 
f N "read_adc" 1 342 ""
v L "mode" 1 342 "int8" `195 
f B "read_adc" 1 342 "int8(int8 mode)" `194 
f N "read_adc" 1 343 ""
f G "read_adc" 1 343 "int16()" `196 
f N "read_adc" 1 344 ""
v L "mode" 1 344 "int8" `197 
f G "read_adc" 1 344 "int16(int8 mode)" `196 
f N "adc_done" 1 345 ""
f B "adc_done" 1 345 "int8(int8 mode)" `196  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 347 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 348 "0x100"
d G "ADC_CLOCK_DIV_8" 1 349 "0x40"
d G "ADC_CLOCK_DIV_32" 1 350 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 351 "0xc0" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 354 ""
v L "setting" 1 354 "int8" `198 
f B "setup_adc_ports" 1 354 "void(int8 setting)" `197 
f N "set_analog_pins" 1 355 ""
v L "setting" 1 355 "int8" `200 
f B "set_analog_pins" 1 355 "void(int8 setting)" `199 
f N "set_adc_channel" 1 356 ""
v L "channel" 1 356 "int8" `202 
f B "set_adc_channel" 1 356 "void(int8 channel)" `201  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 358 "7" "None"
d G "ALL_ANALOG" 1 359 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 360 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 361 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 362 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 363 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 364 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 365 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 366 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 367 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 368 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 369 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 370 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 371 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 372 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 373 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 374 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 375 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 376 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 377 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 378 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 379 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 380 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 381 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 382 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 383 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 384 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 385 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 388 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 389 "1"
d G "ADC_READ_ONLY" 1 390 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 396 ""
v L "x" 1 396 "sint8" `204 
f B "abs" 1 396 "sint8(sint8 x)" `203 
f N "abs" 1 397 ""
v L "x" 1 397 "sint16" `206 
f B "abs" 1 397 "sint16(sint16 x)" `205 
f N "abs" 1 398 ""
v L "x" 1 398 "sint32" `208 
f B "abs" 1 398 "sint32(sint32 x)" `207 
f N "abs" 1 399 ""
v L "x" 1 399 "float" `210 
f B "abs" 1 399 "float(float x)" `209 
f N "_mul" 1 400 ""
v L "??65535" 1 400 "int8" `212 
v L "??65535" 1 400 "int8" `213 
f B "_mul" 1 400 "int16(int8 ,int8 )" `211 
f N "_mul" 1 401 ""
v L "??65535" 1 401 "sint8" `215 
v L "??65535" 1 401 "sint8" `216 
f B "_mul" 1 401 "sint16(sint8 ,sint8 )" `214 
f N "_mul" 1 402 ""
v L "??65535" 1 402 "int16" `218 
v L "??65535" 1 402 "int16" `219 
f B "_mul" 1 402 "int32(int16 ,int16 )" `217 
f N "_mul" 1 403 ""
v L "??65535" 1 403 "sint16" `221 
v L "??65535" 1 403 "sint16" `222 
f B "_mul" 1 403 "sint32(sint16 ,sint16 )" `220  "Memory Manipulation Prototypes:"
f N "read_bank" 1 406 ""
v L "bank" 1 406 "int8" `224 
v L "offset" 1 406 "int8" `225 
f B "read_bank" 1 406 "int8(int8 bank,int8 offset)" `223 
f N "write_bank" 1 407 ""
v L "bank" 1 407 "int8" `227 
v L "offset" 1 407 "int8" `228 
v L "value" 1 407 "int8" `229 
f B "write_bank" 1 407 "void(int8 bank,int8 offset,int8 value)" `226 
f N "strcpy" 1 408 ""
v L "dest" 1 408 "*int8" `231 
v L "src" 1 408 "*int8" `232 
f B "strcpy" 1 408 "void(*int8 dest,*int8 src)" `230 
f N "memset" 1 409 ""
v L "destination" 1 409 "*int8" `234 
v L "value" 1 409 "int8" `235 
v L "num" 1 409 "int16" `236 
f B "memset" 1 409 "void(*int8 destination,int8 value,int16 num)" `233 
f N "memcpy" 1 410 ""
v L "destination" 1 410 "*int8" `238 
v L "source" 1 410 "*int8" `239 
v L "num" 1 410 "int16" `240 
f B "memcpy" 1 410 "void(*int8 destination,*int8 source,int16 num)" `237  "String Prototypes:"
f N "toupper" 1 413 ""
v L "cvalue" 1 413 "int8" `242 
f B "toupper" 1 413 "int8(int8 cvalue)" `241 
f N "tolower" 1 414 ""
v L "cvalue" 1 414 "int8" `244 
f B "tolower" 1 414 "int8(int8 cvalue)" `243 
f N "sprintf" 1 415 ""
v L "string" 1 415 "*int8" `246 
v L "cstring" 1 415 "*int8" `247 
f B "sprintf" 1 415 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `245  "Data Manipulators Prototypes:"
f N "shift_left" 1 418 ""
v L "address" 1 418 "*int8" `250 
v L "bytes" 1 418 "int8" `251 
v L "value" 1 418 "int8" `252 
f B "shift_left" 1 418 "int8(*int8 address,int8 bytes,int8 value)" `249 
f N "shift_right" 1 419 ""
v L "address" 1 419 "*int8" `254 
v L "bytes" 1 419 "int8" `255 
v L "value" 1 419 "int8" `256 
f B "shift_right" 1 419 "int8(*int8 address,int8 bytes,int8 value)" `253 
f N "rotate_left" 1 420 ""
v L "address" 1 420 "*int8" `258 
v L "bytes" 1 420 "int8" `259 
f B "rotate_left" 1 420 "void(*int8 address,int8 bytes)" `257 
f N "rotate_right" 1 421 ""
v L "address" 1 421 "*int8" `261 
v L "bytes" 1 421 "int8" `262 
f B "rotate_right" 1 421 "void(*int8 address,int8 bytes)" `260 
f N "swap" 1 422 ""
v L "value" 1 422 "int8" `264 
f B "swap" 1 422 "void(int8 value)" `263 
f N "make8" 1 423 ""
v L "var" 1 423 "int16" `266 
v L "offset" 1 423 "int8" `267 
f B "make8" 1 423 "int8(int16 var,int8 offset)" `265 
f N "make8" 1 424 ""
v L "var" 1 424 "int32" `269 
v L "offset" 1 424 "int8" `270 
f B "make8" 1 424 "int8(int32 var,int8 offset)" `268 
f N "make16" 1 425 ""
v L "varhigh" 1 425 "int8" `272 
v L "varlow" 1 425 "int8" `273 
f B "make16" 1 425 "int16(int8 varhigh,int8 varlow)" `271 
f N "make32" 1 426 ""
v L "var1" 1 426 "int16" `275 
f B "make32" 1 426 "int32(int16 var1)" `274 
f N "make32" 1 427 ""
v L "var1" 1 427 "int16" `277 
v L "var2" 1 427 "int16" `278 
f B "make32" 1 427 "int32(int16 var1,int16 var2)" `276 
f N "make32" 1 428 ""
v L "var1" 1 428 "int16" `280 
v L "var2" 1 428 "int8" `281 
f B "make32" 1 428 "int32(int16 var1,int8 var2)" `279 
f N "make32" 1 429 ""
v L "var1" 1 429 "int16" `283 
v L "var2" 1 429 "int8" `284 
v L "var3" 1 429 "int8" `285 
f B "make32" 1 429 "int32(int16 var1,int8 var2,int8 var3)" `282 
f N "make32" 1 430 ""
v L "var1" 1 430 "int8" `287 
f B "make32" 1 430 "int32(int8 var1)" `286 
f N "make32" 1 431 ""
v L "var1" 1 431 "int8" `289 
v L "var2" 1 431 "int8" `290 
f B "make32" 1 431 "int32(int8 var1,int8 var2)" `288 
f N "make32" 1 432 ""
v L "var1" 1 432 "int8" `292 
v L "var2" 1 432 "int8" `293 
v L "var3" 1 432 "int8" `294 
f B "make32" 1 432 "int32(int8 var1,int8 var2,int8 var3)" `291 
f N "make32" 1 433 ""
v L "var1" 1 433 "int8" `296 
v L "var2" 1 433 "int8" `297 
v L "var3" 1 433 "int8" `298 
v L "var4" 1 433 "int8" `299 
f B "make32" 1 433 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `295 
f N "make32" 1 434 ""
v L "var1" 1 434 "int8" `301 
v L "var2" 1 434 "int16" `302 
f B "make32" 1 434 "int32(int8 var1,int16 var2)" `300 
f N "make32" 1 435 ""
v L "var1" 1 435 "int8" `304 
v L "var2" 1 435 "int16" `305 
v L "var3" 1 435 "int8" `306 
f B "make32" 1 435 "int32(int8 var1,int16 var2,int8 var3)" `303 
f N "make32" 1 436 ""
v L "var1" 1 436 "int8" `308 
v L "var2" 1 436 "int8" `309 
v L "var3" 1 436 "int16" `310 
f B "make32" 1 436 "int32(int8 var1,int8 var2,int16 var3)" `307 
f N "bit_set" 1 437 ""
v L "var" 1 437 "int8" `312 
v L "bit" 1 437 "int8" `313 
f B "bit_set" 1 437 "void(int8 var,int8 bit)" `311 
f N "bit_set" 1 438 ""
v L "var" 1 438 "int16" `315 
v L "bit" 1 438 "int8" `316 
f B "bit_set" 1 438 "void(int16 var,int8 bit)" `314 
f N "bit_set" 1 439 ""
v L "var" 1 439 "int32" `318 
v L "bit" 1 439 "int8" `319 
f B "bit_set" 1 439 "void(int32 var,int8 bit)" `317 
f N "bit_clear" 1 440 ""
v L "var" 1 440 "int8" `321 
v L "bit" 1 440 "int8" `322 
f B "bit_clear" 1 440 "void(int8 var,int8 bit)" `320 
f N "bit_clear" 1 441 ""
v L "var" 1 441 "int16" `324 
v L "bit" 1 441 "int8" `325 
f B "bit_clear" 1 441 "void(int16 var,int8 bit)" `323 
f N "bit_clear" 1 442 ""
v L "var" 1 442 "int32" `327 
v L "bit" 1 442 "int8" `328 
f B "bit_clear" 1 442 "void(int32 var,int8 bit)" `326 
f N "bit_test" 1 443 ""
v L "var" 1 443 "int8" `330 
v L "bit" 1 443 "int8" `331 
f B "bit_test" 1 443 "int8(int8 var,int8 bit)" `329 
f N "bit_test" 1 444 ""
v L "var" 1 444 "int16" `333 
v L "bit" 1 444 "int8" `334 
f B "bit_test" 1 444 "int8(int16 var,int8 bit)" `332 
f N "bit_test" 1 445 ""
v L "var" 1 445 "int32" `336 
v L "bit" 1 445 "int8" `337 
f B "bit_test" 1 445 "int8(int32 var,int8 bit)" `335  "#use delay() Prototypes:"
f N "delay_cycles" 1 448 ""
v L "count" 1 448 "int8" `339 
f B "delay_cycles" 1 448 "void(int8 count)" `338 
f N "delay_ms" 1 449 ""
v L "time" 1 449 "int16" `341 
f B "delay_ms" 1 449 "void(int16 time)" `340 
f N "delay_us" 1 450 ""
v L "time" 1 450 "int16" `343 
f B "delay_us" 1 450 "void(int16 time)" `342  "#use rs232() Prototypes:"
f N "putchar" 1 453 ""
v L "cdata" 1 453 "int8" `345 
f B "putchar" 1 453 "void(int8 cdata)" `344 
f N "putchar" 1 454 ""
v L "cdata" 1 454 "int8" `347 
v L "stream" 1 454 "int8" `348 
f B "putchar" 1 454 "void(int8 cdata,int8 stream)" `346 
f N "puts" 1 455 ""
v L "string" 1 455 "*int8" `350 
f B "puts" 1 455 "void(*int8 string)" `349 
f N "puts" 1 456 ""
v L "string" 1 456 "*int8" `352 
v L "stream" 1 456 "int8" `353 
f B "puts" 1 456 "void(*int8 string,int8 stream)" `351 
f N "getch" 1 457 ""
f B "getch" 1 457 "int8()" `354 
f N "getch" 1 458 ""
v L "stream" 1 458 "int8" `356 
f B "getch" 1 458 "int8(int8 stream)" `355 
f N "gets" 1 459 ""
v L "string" 1 459 "*int8" `358 
f B "gets" 1 459 "void(*int8 string)" `357 
f N "gets" 1 460 ""
v L "string" 1 460 "*int8" `360 
v L "stream" 1 460 "int8" `361 
f B "gets" 1 460 "void(*int8 string,int8 stream)" `359 
f N "kbhit" 1 461 ""
f B "kbhit" 1 461 "int8()" `362 
f N "kbhit" 1 462 ""
v L "stream" 1 462 "int8" `364 
f B "kbhit" 1 462 "int8(int8 stream)" `363 
f N "printf" 1 463 ""
v L "string" 1 463 "*int8" `366 
f B "printf" 1 463 "void(*int8 string,*int8 _VA_LIST)" `365 
f N "fprintf" 1 464 ""
v L "stream" 1 464 "int8" `369 
v L "string" 1 464 "*int8" `370 
f B "fprintf" 1 464 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `368 
f N "putc_send" 1 465 ""
f B "putc_send" 1 465 "void()" `372 
f N "fputc_send" 1 466 ""
v L "stream" 1 466 "int8" `374 
f B "fputc_send" 1 466 "void(int8 stream)" `373 
f N "rcv_buffer_full" 1 467 ""
f B "rcv_buffer_full" 1 467 "int8()" `375 
f N "rcv_buffer_full" 1 468 ""
v L "stream" 1 468 "int8" `377 
f B "rcv_buffer_full" 1 468 "int8(int8 stream)" `376 
f N "rcv_buffer_bytes" 1 469 ""
f B "rcv_buffer_bytes" 1 469 "int16()" `378 
f N "rcv_buffer_bytes" 1 470 ""
v L "stream" 1 470 "int8" `380 
f B "rcv_buffer_bytes" 1 470 "int16(int8 stream)" `379 
f N "tx_buffer_full" 1 471 ""
f B "tx_buffer_full" 1 471 "int8()" `381 
f N "tx_buffer_full" 1 472 ""
v L "stream" 1 472 "int8" `383 
f B "tx_buffer_full" 1 472 "int8(int8 stream)" `382 
f N "tx_buffer_bytes" 1 473 ""
f B "tx_buffer_bytes" 1 473 "int16()" `384 
f N "tx_buffer_bytes" 1 474 ""
v L "stream" 1 474 "int8" `386 
f B "tx_buffer_bytes" 1 474 "int16(int8 stream)" `385  "#use i2c() Prototypes:"
f N "i2c_read" 1 477 ""
f B "i2c_read" 1 477 "int8()" `387 
f N "i2c_read" 1 478 ""
v L "ack" 1 478 "int8" `389 
f B "i2c_read" 1 478 "int8(int8 ack)" `388 
f N "i2c_read" 1 479 ""
v L "stream" 1 479 "int8" `391 
v L "ack" 1 479 "int8" `392 
f B "i2c_read" 1 479 "int8(int8 stream,int8 ack)" `390 
f N "i2c_write" 1 480 ""
v L "data" 1 480 "int8" `394 
f B "i2c_write" 1 480 "int8(int8 data)" `393 
f N "i2c_write" 1 481 ""
v L "stream" 1 481 "int8" `396 
v L "data" 1 481 "int8" `397 
f B "i2c_write" 1 481 "int8(int8 stream,int8 data)" `395 
f N "i2c_start" 1 482 ""
f B "i2c_start" 1 482 "void()" `398 
f N "i2c_start" 1 483 ""
v L "stream" 1 483 "int8" `400 
f B "i2c_start" 1 483 "void(int8 stream)" `399 
f N "i2c_start" 1 484 ""
v L "stream" 1 484 "int8" `402 
v L "restart" 1 484 "int8" `403 
f B "i2c_start" 1 484 "void(int8 stream,int8 restart)" `401 
f N "i2c_stop" 1 485 ""
f B "i2c_stop" 1 485 "void()" `404 
f N "i2c_stop" 1 486 ""
v L "stream" 1 486 "int8" `406 
f B "i2c_stop" 1 486 "void(int8 stream)" `405 
f N "i2c_isr_state" 1 487 ""
f B "i2c_isr_state" 1 487 "int8()" `407 
f N "i2c_slaveaddr" 1 488 ""
v L "addr" 1 488 "int8" `409 
f B "i2c_slaveaddr" 1 488 "void(int8 addr)" `408 
f N "i2c_slaveaddr" 1 489 ""
v L "stream" 1 489 "int8" `411 
v L "addr" 1 489 "int8" `412 
f B "i2c_slaveaddr" 1 489 "void(int8 stream,int8 addr)" `410 
f N "i2c_poll" 1 490 ""
f B "i2c_poll" 1 490 "int8()" `413 
f N "i2c_poll" 1 491 ""
v L "stream" 1 491 "int8" `415 
f B "i2c_poll" 1 491 "int8(int8 stream)" `414 
f N "i2c_init" 1 492 ""
v L "baud" 1 492 "int32" `417 
f B "i2c_init" 1 492 "void(int32 baud)" `416 
f N "i2c_init" 1 493 ""
v L "stream" 1 493 "int8" `419 
v L "baud" 1 493 "int32" `420 
f B "i2c_init" 1 493 "void(int8 stream,int32 baud)" `418 
f N "i2c_transfer" 1 494 ""
v L "address" 1 494 "int8" `422 
v L "wData" 1 494 "*int8" `423 
v L "wCount" 1 494 "int8" `424 
f B "i2c_transfer" 1 494 "int8(int8 address,*int8 wData,int8 wCount)" `421 
f N "i2c_transfer" 1 495 ""
v L "address" 1 495 "int8" `426 
v L "wData" 1 495 "*int8" `427 
v L "wCount" 1 495 "int8" `428 
v L "rData" 1 495 "*int8" `429 
v L "rCount" 1 495 "*int8" `430 
f B "i2c_transfer" 1 495 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `425 
f N "i2c_transfer" 1 496 ""
v L "stream" 1 496 "int8" `432 
v L "address" 1 496 "int8" `433 
v L "wData" 1 496 "*int8" `434 
v L "wCount" 1 496 "int8" `435 
f B "i2c_transfer" 1 496 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `431 
f N "i2c_transfer" 1 497 ""
v L "stream" 1 497 "int8" `437 
v L "address" 1 497 "int8" `438 
v L "wData" 1 497 "*int8" `439 
v L "wCount" 1 497 "int8" `440 
v L "rData" 1 497 "*int8" `441 
v L "rCount" 1 497 "*int8" `442 
f B "i2c_transfer" 1 497 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `436 
f N "i2c_transfer_out" 1 498 ""
v L "address" 1 498 "int8" `444 
v L "wData" 1 498 "*int8" `445 
v L "wCount" 1 498 "int8" `446 
f B "i2c_transfer_out" 1 498 "int8(int8 address,*int8 wData,int8 wCount)" `443 
f N "i2c_transfer_out" 1 499 ""
v L "stream" 1 499 "int8" `448 
v L "address" 1 499 "int8" `449 
v L "wData" 1 499 "*int8" `450 
v L "wCount" 1 499 "int8" `451 
f B "i2c_transfer_out" 1 499 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `447 
f N "i2c_transfer_in" 1 500 ""
v L "address" 1 500 "int8" `453 
v L "rData" 1 500 "*int8" `454 
v L "rCount" 1 500 "int8" `455 
f B "i2c_transfer_in" 1 500 "int8(int8 address,*int8 rData,int8 rCount)" `452 
f N "i2c_transfer_in" 1 501 ""
v L "stream" 1 501 "int8" `457 
v L "address" 1 501 "int8" `458 
v L "rData" 1 501 "*int8" `459 
v L "rCount" 1 501 "int8" `460 
f B "i2c_transfer_in" 1 501 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `456  "#use spi() Prototypes:"
f N "spi_xfer" 1 504 ""
f B "spi_xfer" 1 504 "int8()" `461 
f N "spi_xfer" 1 505 ""
f G "spi_xfer" 1 505 "int16()" `462 
f N "spi_xfer" 1 506 ""
f G "spi_xfer" 1 506 "int32()" `462 
f N "spi_xfer" 1 507 ""
v L "data" 1 507 "int8" `463 
f B "spi_xfer" 1 507 "int8(int8 data)" `462 
f N "spi_xfer" 1 508 ""
v L "data" 1 508 "int16" `465 
f B "spi_xfer" 1 508 "int16(int16 data)" `464 
f N "spi_xfer" 1 509 ""
v L "data" 1 509 "int32" `467 
f B "spi_xfer" 1 509 "int32(int32 data)" `466 
f N "spi_xfer" 1 510 ""
v L "stream" 1 510 "int8" `469 
v L "data" 1 510 "int8" `470 
f B "spi_xfer" 1 510 "int8(int8 stream,int8 data)" `468 
f N "spi_xfer" 1 511 ""
v L "stream" 1 511 "int8" `472 
v L "data" 1 511 "int16" `473 
f B "spi_xfer" 1 511 "int16(int8 stream,int16 data)" `471 
f N "spi_xfer" 1 512 ""
v L "stream" 1 512 "int8" `475 
v L "data" 1 512 "int32" `476 
f B "spi_xfer" 1 512 "int32(int8 stream,int32 data)" `474 
f N "spi_xfer" 1 513 ""
v L "stream" 1 513 "int8" `478 
v L "data" 1 513 "int8" `479 
v L "bits" 1 513 "int8" `480 
f B "spi_xfer" 1 513 "int8(int8 stream,int8 data,int8 bits)" `477 
f N "spi_xfer" 1 514 ""
v L "stream" 1 514 "int8" `482 
v L "data" 1 514 "int16" `483 
v L "bits" 1 514 "int8" `484 
f B "spi_xfer" 1 514 "int16(int8 stream,int16 data,int8 bits)" `481 
f N "spi_xfer" 1 515 ""
v L "stream" 1 515 "int8" `486 
v L "data" 1 515 "int32" `487 
v L "bits" 1 515 "int8" `488 
f B "spi_xfer" 1 515 "int32(int8 stream,int32 data,int8 bits)" `485 
f N "spi_init" 1 516 ""
v L "baud" 1 516 "int32" `490 
f B "spi_init" 1 516 "void(int32 baud)" `489 
f N "spi_init" 1 517 ""
v L "stream" 1 517 "int8" `492 
v L "baud" 1 517 "int32" `493 
f B "spi_init" 1 517 "void(int8 stream,int32 baud)" `491 
f N "spi_speed" 1 518 ""
v L "baud" 1 518 "int32" `495 
f B "spi_speed" 1 518 "void(int32 baud)" `494 
f N "spi_speed" 1 519 ""
v L "stream" 1 519 "int8" `497 
v L "baud" 1 519 "int32" `498 
f B "spi_speed" 1 519 "void(int8 stream,int32 baud)" `496 
f N "spi_speed" 1 520 ""
v L "stream" 1 520 "int8" `500 
v L "baud" 1 520 "int32" `501 
v L "clock" 1 520 "int32" `502 
f B "spi_speed" 1 520 "void(int8 stream,int32 baud,int32 clock)" `499 
f N "spi_prewrite" 1 521 ""
v L "data" 1 521 "int8" `504 
f B "spi_prewrite" 1 521 "void(int8 data)" `503 
f N "spi_prewrite" 1 522 ""
v L "data" 1 522 "int16" `506 
f B "spi_prewrite" 1 522 "void(int16 data)" `505 
f N "spi_prewrite" 1 523 ""
v L "data" 1 523 "int32" `508 
f B "spi_prewrite" 1 523 "void(int32 data)" `507 
f N "spi_prewrite" 1 524 ""
v L "??65535" 1 524 "int8" `510 
v L "data" 1 524 "int8" `511 
f B "spi_prewrite" 1 524 "void(int8 ,int8 data)" `509 
f N "spi_prewrite" 1 525 ""
v L "??65535" 1 525 "int8" `513 
v L "data" 1 525 "int16" `514 
f B "spi_prewrite" 1 525 "void(int8 ,int16 data)" `512 
f N "spi_prewrite" 1 526 ""
v L "??65535" 1 526 "int8" `516 
v L "data" 1 526 "int32" `517 
f B "spi_prewrite" 1 526 "void(int8 ,int32 data)" `515 
f N "spi_xfer_in" 1 527 ""
f B "spi_xfer_in" 1 527 "int8()" `518 
f N "spi_xfer_in" 1 528 ""
f G "spi_xfer_in" 1 528 "int16()" `519 
f N "spi_xfer_in" 1 529 ""
f G "spi_xfer_in" 1 529 "int32()" `519 
f N "spi_xfer_in" 1 530 ""
v L "bits" 1 530 "int8" `520 
f B "spi_xfer_in" 1 530 "int8(int8 bits)" `519 
f N "spi_xfer_in" 1 531 ""
v L "bits" 1 531 "int8" `522 
f G "spi_xfer_in" 1 531 "int16(int8 bits)" `521 
f N "spi_xfer_in" 1 532 ""
v L "bits" 1 532 "int8" `522 
f G "spi_xfer_in" 1 532 "int32(int8 bits)" `521 
f N "spi_xfer_in" 1 533 ""
v L "stream" 1 533 "int8" `522 
v L "bits" 1 533 "int8" `523 
f B "spi_xfer_in" 1 533 "int8(int8 stream,int8 bits)" `521 
f N "spi_xfer_in" 1 534 ""
v L "stream" 1 534 "int8" `522 
v L "bits" 1 534 "int8" `526 
f G "spi_xfer_in" 1 534 "int16(int8 stream,int8 bits)" `524 
f N "spi_xfer_in" 1 535 ""
v L "stream" 1 535 "int8" `522 
v L "bits" 1 535 "int8" `526 
f G "spi_xfer_in" 1 535 "int32(int8 stream,int8 bits)" `524 
f N "spi_transfer" 1 536 ""
v L "wData" 1 536 "*int8" `525 
v L "rData" 1 536 "*int8" `526 
v L "count" 1 536 "int16" `527 
f B "spi_transfer" 1 536 "void(*int8 wData,*int8 rData,int16 count)" `524 
f N "spi_transfer" 1 537 ""
v L "stream" 1 537 "int8" `529 
v L "wData" 1 537 "*int8" `530 
v L "rData" 1 537 "*int8" `531 
v L "count" 1 537 "int16" `532 
f B "spi_transfer" 1 537 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `528 
f N "spi_transfer_write" 1 538 ""
v L "wData" 1 538 "*int8" `534 
v L "count" 1 538 "int16" `535 
f B "spi_transfer_write" 1 538 "void(*int8 wData,int16 count)" `533 
f N "spi_transfer_write" 1 539 ""
v L "stream" 1 539 "int8" `537 
v L "wData" 1 539 "*int8" `538 
v L "count" 1 539 "int16" `539 
f B "spi_transfer_write" 1 539 "void(int8 stream,*int8 wData,int16 count)" `536 
f N "spi_transfer_read" 1 540 ""
v L "rData" 1 540 "*int8" `541 
v L "count" 1 540 "int16" `542 
f B "spi_transfer_read" 1 540 "void(*int8 rData,int16 count)" `540 
f N "spi_transfer_read" 1 541 ""
v L "stream" 1 541 "int8" `544 
v L "rData" 1 541 "*int8" `545 
v L "count" 1 541 "int16" `546 
f B "spi_transfer_read" 1 541 "void(int8 stream,*int8 rData,int16 count)" `543  "#use rtos() Prototypes:"
f N "rtos_run" 1 544 ""
f B "rtos_run" 1 544 "void()" `547 
f N "rtos_yield" 1 545 ""
f B "rtos_yield" 1 545 "void()" `548 
f N "rtos_enable" 1 546 ""
v L "task" 1 546 "int8" `550 
f B "rtos_enable" 1 546 "void(int8 task)" `549 
f N "rtos_disable" 1 547 ""
v L "task" 1 547 "int8" `552 
f B "rtos_disable" 1 547 "void(int8 task)" `551 
f N "rtos_terminate" 1 548 ""
f B "rtos_terminate" 1 548 "void()" `553 
f N "rtos_await" 1 549 ""
v L "flag" 1 549 "int8" `555 
f B "rtos_await" 1 549 "void(int8 flag)" `554 
f N "rtos_wait" 1 550 ""
v L "sem" 1 550 "int8" `557 
f B "rtos_wait" 1 550 "void(int8 sem)" `556 
f N "rtos_signal" 1 551 ""
v L "sem" 1 551 "int8" `559 
f B "rtos_signal" 1 551 "void(int8 sem)" `558 
f N "rtos_msg_send" 1 552 ""
v L "task" 1 552 "int8" `561 
v L "msg" 1 552 "int8" `562 
f B "rtos_msg_send" 1 552 "void(int8 task,int8 msg)" `560 
f N "rtos_msg_read" 1 553 ""
f B "rtos_msg_read" 1 553 "int8()" `563 
f N "rtos_msg_poll" 1 554 ""
f B "rtos_msg_poll" 1 554 "int8()" `564 
f N "rtos_overrun" 1 555 ""
v L "task" 1 555 "int8" `566 
f B "rtos_overrun" 1 555 "int8(int8 task)" `565 
f N "rtos_stats" 1 556 ""
v L "task" 1 556 "int8" `568 
v L "stat" 1 556 "*int8" `569 
f B "rtos_stats" 1 556 "void(int8 task,*int8 stat)" `567  "#use timer() Prototypes:"
f N "get_ticks" 1 559 ""
f B "get_ticks" 1 559 "int8()" `570 
f N "get_ticks" 1 560 ""
f G "get_ticks" 1 560 "int16()" `571 
f N "get_ticks" 1 561 ""
f G "get_ticks" 1 561 "int32()" `571 
f N "get_ticks" 1 562 ""
v L "stream" 1 562 "int8" `572 
f B "get_ticks" 1 562 "int8(int8 stream)" `571 
f N "get_ticks" 1 563 ""
v L "stream" 1 563 "int8" `574 
f G "get_ticks" 1 563 "int16(int8 stream)" `573 
f N "get_ticks" 1 564 ""
v L "stream" 1 564 "int8" `574 
f G "get_ticks" 1 564 "int32(int8 stream)" `573 
f N "set_ticks" 1 565 ""
v L "value" 1 565 "int8" `574 
f B "set_ticks" 1 565 "void(int8 value)" `573 
f N "set_ticks" 1 566 ""
v L "value" 1 566 "int16" `576 
f B "set_ticks" 1 566 "void(int16 value)" `575 
f N "set_ticks" 1 567 ""
v L "value" 1 567 "int32" `578 
f B "set_ticks" 1 567 "void(int32 value)" `577 
f N "set_ticks" 1 568 ""
v L "stream" 1 568 "int8" `580 
v L "value" 1 568 "int8" `581 
f B "set_ticks" 1 568 "void(int8 stream,int8 value)" `579 
f N "set_ticks" 1 569 ""
v L "stream" 1 569 "int8" `583 
v L "value" 1 569 "int16" `584 
f B "set_ticks" 1 569 "void(int8 stream,int16 value)" `582 
f N "set_ticks" 1 570 ""
v L "stream" 1 570 "int8" `586 
v L "value" 1 570 "int32" `587 
f B "set_ticks" 1 570 "void(int8 stream,int32 value)" `585  "#use pwm() Prototypes:"
f N "pwm_on" 1 573 ""
f B "pwm_on" 1 573 "void()" `588 
f N "pwm_on" 1 574 ""
v L "stream" 1 574 "int8" `590 
f B "pwm_on" 1 574 "void(int8 stream)" `589 
f N "pwm_off" 1 575 ""
f B "pwm_off" 1 575 "void()" `591 
f N "pwm_off" 1 576 ""
v L "stream" 1 576 "int8" `593 
f B "pwm_off" 1 576 "void(int8 stream)" `592 
f N "pwm_set_duty" 1 577 ""
v L "duty" 1 577 "int16" `595 
f B "pwm_set_duty" 1 577 "void(int16 duty)" `594 
f N "pwm_set_duty" 1 578 ""
v L "stream" 1 578 "int8" `597 
v L "duty" 1 578 "int16" `598 
f B "pwm_set_duty" 1 578 "void(int8 stream,int16 duty)" `596 
f N "pwm_set_duty_percent" 1 579 ""
v L "percent" 1 579 "int16" `600 
f B "pwm_set_duty_percent" 1 579 "void(int16 percent)" `599 
f N "pwm_set_duty_percent" 1 580 ""
v L "stream" 1 580 "int8" `602 
v L "percent" 1 580 "int16" `603 
f B "pwm_set_duty_percent" 1 580 "void(int8 stream,int16 percent)" `601 
f N "pwm_set_frequency" 1 581 ""
v L "frequency" 1 581 "int32" `605 
f B "pwm_set_frequency" 1 581 "void(int32 frequency)" `604 
f N "pwm_set_frequency" 1 582 ""
v L "stream" 1 582 "int8" `607 
v L "frequency" 1 582 "int32" `608 
f B "pwm_set_frequency" 1 582 "void(int8 stream,int32 frequency)" `606  "#use capture() Prototypes:"
f N "get_capture_time" 1 585 ""
f B "get_capture_time" 1 585 "int16()" `609 
f N "get_capture_time" 1 586 ""
v L "stream" 1 586 "int8" `611 
f B "get_capture_time" 1 586 "int16(int8 stream)" `610 
f N "get_capture_event" 1 587 ""
f B "get_capture_event" 1 587 "int8()" `612 
f N "get_capture_event" 1 588 ""
v L "stream" 1 588 "int8" `614 
f B "get_capture_event" 1 588 "int8(int8 stream)" `613  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 601 ""
v L "address" 1 601 "int16" `616 
f B "goto_address" 1 601 "void(int16 address)" `615 
f N "label_address" 1 602 ""
v L "label" 1 602 "int16" `618 
f B "label_address" 1 602 "int16(int16 label)" `617  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 605 ""
v L "address" 1 605 "int16" `620 
v L "dataptr" 1 605 "*int8" `621 
v L "count" 1 605 "int16" `622 
f B "read_program_memory" 1 605 "void(int16 address,*int8 dataptr,int16 count)" `619 
f N "read_program_eeprom" 1 606 ""
v L "address" 1 606 "int16" `624 
f B "read_program_eeprom" 1 606 "int16(int16 address)" `623  "Program Memory Write Prototypes:"
f N "write_program_memory" 1 609 ""
v L "address" 1 609 "int16" `626 
v L "dataptr" 1 609 "*int8" `627 
v L "count" 1 609 "int16" `628 
f B "write_program_memory" 1 609 "void(int16 address,*int8 dataptr,int16 count)" `625 
f N "write_program_eeprom" 1 610 ""
v L "address" 1 610 "int16" `630 
v L "data" 1 610 "int16" `631 
f B "write_program_eeprom" 1 610 "void(int16 address,int16 data)" `629  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 617 "unsigned int8"
f N "read_eeprom" 1 620 ""
v L "address" 1 620 "int8" `633 
f B "read_eeprom" 1 620 "int8(int8 address)" `632 
f N "write_eeprom" 1 621 ""
v L "address" 1 621 "int8" `635 
v L "value" 1 621 "int8" `636 
f B "write_eeprom" 1 621 "void(int8 address,int8 value)" `634  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 628 ""
v L "interrupt" 1 628 "int32" `638 
f B "enable_interrupts" 1 628 "void(int32 interrupt)" `637 
f N "disable_interrupts" 1 629 ""
v L "interrupt" 1 629 "int32" `640 
f B "disable_interrupts" 1 629 "void(int32 interrupt)" `639 
f N "clear_interrupt" 1 630 ""
v L "interrupt" 1 630 "int32" `642 
f B "clear_interrupt" 1 630 "void(int32 interrupt)" `641 
f N "interrupt_active" 1 631 ""
v L "interrupt" 1 631 "int32" `644 
f B "interrupt_active" 1 631 "int8(int32 interrupt)" `643 
f N "interrupt_enabled" 1 632 ""
v L "interrupt" 1 632 "int32" `646 
f B "interrupt_enabled" 1 632 "int8(int32 interrupt)" `645 
f N "ext_int_edge" 1 633 ""
v L "source" 1 633 "int8" `648 
v L "edge" 1 633 "int8" `649 
f B "ext_int_edge" 1 633 "void(int8 source,int8 edge)" `647 
f N "jump_to_isr" 1 634 ""
v L "address" 1 634 "int16" `651 
f B "jump_to_isr" 1 634 "void(int16 address)" `650  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 636 "0x40"
d G "H_TO_L" 1 637 "0"
d G "GLOBAL" 1 639 "0x0BC0"
d G "PERIPH" 1 640 "0x0B40"
d G "INT_RTCC" 1 641 "0x000B20"
d G "INT_RB" 1 642 "0x00FF0B08"
d G "INT_EXT_L2H" 1 643 "0x50000B10"
d G "INT_EXT_H2L" 1 644 "0x60000B10"
d G "INT_EXT" 1 645 "0x000B10"
d G "INT_AD" 1 646 "0x008C40"
d G "INT_TBE" 1 647 "0x008C10"
d G "INT_RDA" 1 648 "0x008C20"
d G "INT_TIMER1" 1 649 "0x008C01"
d G "INT_TIMER2" 1 650 "0x008C02"
d G "INT_CCP1" 1 651 "0x008C04"
d G "INT_CCP2" 1 652 "0x008D01"
d G "INT_SSP" 1 653 "0x008C08"
d G "INT_PSP" 1 654 "0x008C80"
d G "INT_BUSCOL" 1 655 "0x008D08"
d G "INT_EEPROM" 1 656 "0x008D10"
d G "INT_TIMER0" 1 657 "0x000B20"
D G "use_portb_kbd" 0 6 "TRUE"
D G "use_portd_lcd" 0 7 "TRUE"
D G "__LCD_C__" 2 76 ""
C L "jump_to_isr" 2 2 2 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `662  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 2 109 "(x) lcdlat.enable=x"
D G "lcd_enable_tris" 2 110 "()   lcdtris.enable=0"
D G "lcd_output_rs" 2 117 "(x) lcdlat.rs=x"
D G "lcd_rs_tris" 2 118 "()   lcdtris.rs=0"
D G "lcd_output_rw" 2 125 "(x) lcdlat.rw=x"
D G "lcd_rw_tris" 2 126 "()   lcdtris.rw=0"
D G "LCD_DATA_PORT" 2 149 "getenv("SFR:PORTD")" "portd"
V G "lcd" 2 161 "LCD_PIN_MAP" `663 
V G "lcdlat" 2 161 "LCD_PIN_MAP" `664 
V G "lcdtris" 2 161 "LCD_PIN_MAP" `665 
D G "LCD_TYPE" 2 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 2 187 "20"
F N "lcd_read_nibble" 2 190 ""
f G "lcd_read_nibble" 2 190 "int8()" `666 
F N "lcd_read_byte" 2 192 ""
F G "lcd_read_byte" 2 193 "int8()" `667 
V L "low" 2 194 "int8" `668 
V L "high" 2 194 "int8" `669 
F N "lcd_read_nibble" 2 239 ""
F G "lcd_read_nibble" 2 240 "int8()" `666 
F N "lcd_send_nibble" 2 256 ""
V L "n" 2 256 "int8" `671 
F G "lcd_send_nibble" 2 257 "void(int8 n)" `670 
F N "lcd_send_byte" 2 274 ""
V L "address" 2 274 "int8" `673 
V L "n" 2 274 "int8" `674 
F G "lcd_send_byte" 2 275 "void(int8 address,int8 n)" `672 
F N "lcd_init" 2 299 ""
F G "lcd_init" 2 300 "void()" `675 
V L "i" 2 301 "int8" `676 
V L "LCD_INIT_STRING" 2 302 "int8[4]" `677 
C L "lcd_init" 2 2 2 "FUNCTION"
F N "lcd_gotoxy" 2 345 ""
V L "x" 2 345 "int8" `679 
V L "y" 2 345 "int8" `680 
F G "lcd_gotoxy" 2 346 "void(int8 x,int8 y)" `678 
V L "address" 2 347 "int8" `681 
F N "lcd_putc" 2 363 ""
V L "c" 2 363 "int8" `683 
F G "lcd_putc" 2 364 "void(int8 c)" `682 
F N "lcd_getc" 2 406 ""
V L "x" 2 406 "int8" `685 
V L "y" 2 406 "int8" `686 
F G "lcd_getc" 2 407 "int8(int8 x,int8 y)" `684 
V L "value" 2 408 "int8" `687 
C L "lcd_getc" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 2 424 ""
V L "which" 2 424 "int8" `689 
V L "ptr" 2 424 "*int8" `690 
F G "lcd_set_cgram_char" 2 425 "void(int8 which,*int8 ptr)" `688 
V L "i" 2 426 "int8" `691 
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
F N "lcd_cursor_on" 2 443 ""
V L "on" 2 443 "int8" `693 
F G "lcd_cursor_on" 2 444 "void(int8 on)" `692 
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
D G "set_tris_kbd" 3 36 "(x) set_tris_b(x)"
D G "COL0" 3 55 " (1 << 5)"
D G "COL1" 3 56 " (1 << 6)"
D G "COL2" 3 57 " (1 << 7)"
D G "ROW0" 3 59 " (1 << 1)"
D G "ROW1" 3 60 " (1 << 2)"
D G "ROW2" 3 61 " (1 << 3)"
D G "ROW3" 3 62 " (1 << 4)"
D G "ALL_ROWS" 3 66 " (ROW0|ROW1|ROW2|ROW3)"
D G "ALL_PINS" 3 67 " (ALL_ROWS|COL0|COL1|COL2)"
V G "KEYS" 3 70 "[4][3]" `696 
D G "KBD_DEBOUNCE_FACTOR" 3 75 "33" "Set this number to apx n/333 where"
C L "kbd_init" 3 2 2 "FUNCTION"
F N "kbd_init" 3 80 ""
F G "kbd_init" 3 80 "void()" `699 
F N "kbd_getc" 3 83 ""
F G "kbd_getc" 3 83 "int8()" `700 
V L "kbd_call_count" 3 84 "int8" `701 
V L "kbd_down" 3 85 "int1" `702 
V L "last_key" 3 86 "int8" `703 
V L "col" 3 87 "int8" `704 
V L "kchar" 3 89 "int8" `705 
V L "row" 3 90 "int8" `706 
D G "_STDIO" 4 12 ""
D G "_STRING" 5 12 ""
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 18 "unsigned int16"
D G "size_t" 6 22 "unsigned int8"
D G "wchar_t" 6 26 "unsigned char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*void" `711 
V L "s2" 5 34 "*void" `712 
V L "n" 5 34 "int8" `713 
F G "memmove" 5 35 "*int8(*void s1,*void s2,int8 n)" `710 
V L "sc1" 5 36 "*int8" `714 
V L "sc2" 5 37 "*int8" `715 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `717 
V L "s2" 5 61 "*int8" `718 
V L "n" 5 61 "int8" `719 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int8 n)" `716 
V L "s" 5 63 "*int8" `720 
C L "strcat" 5 19 3 "FUNCTION"
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `722 
V L "s2" 5 78 "*int8" `723 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `721 
V L "s" 5 80 "*int8" `724 
C L "strncat" 5 19 2 "FUNCTION"
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `726 
V L "s2" 5 96 "*int8" `727 
V L "n" 5 96 "int8" `728 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int8 n)" `725 
V L "s" 5 98 "*int8" `729 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*void" `731 
V L "s2" 5 120 "*void" `732 
V L "n" 5 120 "int8" `733 
F G "memcmp" 5 121 "sint8(*void s1,*void s2,int8 n)" `730 
V L "su1" 5 122 "*int8" `734 
V L "su2" 5 122 "*int8" `735 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `737 
V L "s2" 5 134 "*int8" `738 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `736 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `740 
V L "s2" 5 144 "*int8" `741 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `739 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `743 
V L "s2" 5 157 "*int8" `744 
V L "n" 5 157 "int8" `745 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int8 n)" `742 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `747 
V L "s2" 5 170 "*int8" `748 
V L "n" 5 170 "int8" `749 
F G "strxfrm" 5 171 "int8(*int8 s1,*int8 s2,int8 n)" `746 
V L "c" 5 172 "int8" `750 
V L "n1" 5 173 "int8" `751 
C L "strxfrm" 5 19 1 "FUNCTION"
C L "memchr" 5 19 3 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*void" `753 
V L "c" 5 201 "int8" `754 
V L "n" 5 201 "int8" `755 
F G "memchr" 5 202 "*int8(*void s,int8 c,int8 n)" `752 
V L "uc" 5 203 "int8" `756 
V L "su" 5 204 "*int8" `757 
C L "strchr" 5 19 2 "FUNCTION"
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `759 
V L "c" 5 215 "int8" `760 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `758 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `762 
V L "s2" 5 227 "*int8" `763 
F G "strcspn" 5 228 "int8(*int8 s1,*int8 s2)" `761 
V L "sc1" 5 229 "*int8" `764 
V L "sc2" 5 229 "*int8" `765 
C L "strpbrk" 5 19 4 "FUNCTION"
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `767 
V L "s2" 5 242 "*int8" `768 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `766 
V L "sc1" 5 244 "*int8" `769 
V L "sc2" 5 244 "*int8" `770 
C L "strrchr" 5 19 2 "FUNCTION"
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `772 
V L "c" 5 257 "int8" `773 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `771 
V L "p" 5 259 "*int8" `774 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `776 
V L "s2" 5 272 "*int8" `777 
F G "strspn" 5 273 "int8(*int8 s1,*int8 s2)" `775 
V L "sc1" 5 274 "*int8" `778 
V L "sc2" 5 274 "*int8" `779 
C L "strstr" 5 19 6 "FUNCTION"
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `781 
V L "s2" 5 291 "*int8" `782 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `780 
V L "s" 5 293 "*int8" `783 
V L "t" 5 293 "*int8" `784 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `786 
F G "strlen" 5 319 "int8(*int8 s)" `785 
V L "sc" 5 320 "*int8" `787 
C L "strtok" 5 19 13 "FUNCTION"
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `789 
V L "s2" 5 341 "*int8" `790 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `788 
V L "beg" 5 343 "*int8" `791 
V L "end" 5 343 "*int8" `792 
V L "save" 5 344 "*int8" `793 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `795 
V L "s2" 5 392 "*int8" `796 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `794 
C L "strlwr" 5 19 3 "FUNCTION"
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `800 
F G "strlwr" 5 407 "*int8(*int8 s)" `799 
V L "p" 5 408 "*int8" `801 
C L "strupr" 5 19 3 "FUNCTION"
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `803 
F G "strupr" 5 421 "*int8(*int8 s)" `802 
V L "p" 5 422 "*int8" `804 
V G "temperatura" 0 13 "float" `808 
V G "keypad" 0 14 "int8" `809 
V G "i" 0 15 "int8" `810 
V G "keys_pressed" 0 16 "int8[5]" `811 
F N "checkTemp" 0 18 ""
V L "value" 0 18 "int8" `813 
F G "checkTemp" 0 18 "void(int8 value)" `812 
C L "checkTemp" 0 20 1 "FUNCTION"
C L "checkTemp" 0 20 1 "FUNCTION"
C L "checkTemp" 0 20 1 "FUNCTION"
C L "checkTemp" 0 20 1 "FUNCTION"
C L "checkTemp" 0 20 1 "FUNCTION"
C L "checkTemp" 0 20 1 "FUNCTION"
F N "MAIN" 0 81 ""
F G "MAIN" 0 81 "void()" `849 
V L "checkPassword" 0 83 "int8" `850 
V L "valid" 0 84 "int8" `851 
V L "maintinaing" 0 85 "int8" `852 
V L "buttonState" 0 86 "int8" `853 
V L "previousTemp" 0 92 "float" `856 
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
